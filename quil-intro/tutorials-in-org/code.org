* namespace and require
#+BEGIN_SRC clojure
(ns quil-intro
  (:require [quil.core :as q]))


#+END_SRC

* parametric functions in the order they were shown in the post

** spiral
#+BEGIN_SRC clojure
(defn spiral [t]
  [(* t (q/sin t))
   (* t (q/cos t))])


#+END_SRC

** flower
#+BEGIN_SRC clojure

(defn flower [t]
  (let [r (* 200 (q/sin t) (q/cos t))]
    [(* r (q/sin (* t 0.2)))
     (* r (q/cos (* t 0.2)))]))


#+END_SRC

** water-drop
#+BEGIN_SRC clojure

(defn water-drop [t]
  (let [r (* 1.5 t (q/cos t) (q/sin t))]
    [(* r (q/sin t))
     (* r (q/tan t))]))


#+END_SRC

** leaf
#+BEGIN_SRC clojure

(defn leaf [t]
  (let [r (* 1.5 t (q/cos t) (q/sin t))]
    [(* r (q/cos t))
     (* r (q/tan t))]))


#+END_SRC

** f (?)
#+BEGIN_SRC clojure

(defn f [t]
  (let [r (* 3 t (q/cos t) (q/sin t))]
    [(* r (q/cos (* 2 t)))
     (* r (q/sin t))]))




#+END_SRC

* setup and running a sketch
** draw-plot
#+BEGIN_SRC clojure
(defn draw-plot [f from to step]
  (doseq [two-points (->> (range from to step)
                          (map f)
                          (partition 2 1))]
    (apply q/line two-points)))

#+END_SRC

** draw-static
#+BEGIN_SRC clojure
; this is 'draw' from first half of the post
; draws static plot
(defn draw-static []
  (q/with-translation [(/ (q/width) 2) (/ (q/height) 2)]
    (draw-plot f 0 100 0.01)))


#+END_SRC

** setup (as with processing)
#+BEGIN_SRC clojure
(defn setup []
  (q/frame-rate 60)
  (q/background 255)
  (q/color-mode :hsb 10 1 1))




; this is 'draw' from second half of the post

#+END_SRC

** draw-animation
#+BEGIN_SRC clojure
(defn draw-animation []
  (q/with-translation [(/ (q/width) 2) (/ (q/height) 2)]
    (let [t (/ (q/frame-count) 10)]
      ; set color for line
      (q/stroke (mod t 10) 1 1)
      (q/line (flower t) (flower (+ t 0.1))))))


#+END_SRC

** defsketch
#+BEGIN_SRC clojure

(q/defsketch trigonometry
  :size [300 300]
  :setup setup
  :draw draw-animation)



#+END_SRC

